// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"sms/app/gateway/api/dao/model"
)

func newReport(db *gorm.DB, opts ...gen.DOOption) report {
	_report := report{}

	_report.reportDo.UseDB(db, opts...)
	_report.reportDo.UseModel(&model.Report{})

	tableName := _report.reportDo.TableName()
	_report.ALL = field.NewAsterisk(tableName)
	_report.ID = field.NewInt64(tableName, "id")
	_report.FiscalYear = field.NewString(tableName, "fiscal_year")
	_report.Month = field.NewString(tableName, "month")
	_report.Brand = field.NewString(tableName, "brand")
	_report.Io = field.NewString(tableName, "io")
	_report.EstimatedXChargeAmount = field.NewFloat64(tableName, "estimated_x_charge_amount")
	_report.MsgDeliveryNum = field.NewInt32(tableName, "msg_delivery_num")
	_report.BudgetOwner = field.NewString(tableName, "budget_owner")
	_report.BrandFa = field.NewString(tableName, "brand_fa")
	_report.RealXChargeAmount = field.NewFloat64(tableName, "real_x_charge_amount")
	_report.XChargeStatus = field.NewBool(tableName, "x_charge_status")
	_report.Remark = field.NewString(tableName, "remark")
	_report.CreateTime = field.NewTime(tableName, "create_time")
	_report.CreateBy = field.NewString(tableName, "create_by")
	_report.ModifyTime = field.NewTime(tableName, "modify_time")
	_report.ModifyBy = field.NewString(tableName, "modify_by")
	_report.Deleted = field.NewField(tableName, "deleted")
	_report.SmsDeliveryNum = field.NewInt32(tableName, "sms_delivery_num")
	_report.MmsDeliveryNum = field.NewInt32(tableName, "mms_delivery_num")
	_report.GlobalSmsDeliveryNum = field.NewInt32(tableName, "global_sms_delivery_num")
	_report.GcOperationCosts = field.NewFloat64(tableName, "gc_operation_costs")
	_report.CampaignServiceCosts = field.NewFloat64(tableName, "campaign_service_costs")

	_report.fillFieldMap()

	return _report
}

type report struct {
	reportDo reportDo

	ALL                    field.Asterisk
	ID                     field.Int64
	FiscalYear             field.String
	Month                  field.String
	Brand                  field.String
	Io                     field.String
	EstimatedXChargeAmount field.Float64
	MsgDeliveryNum         field.Int32
	BudgetOwner            field.String
	BrandFa                field.String
	RealXChargeAmount      field.Float64
	XChargeStatus          field.Bool
	Remark                 field.String
	CreateTime             field.Time
	CreateBy               field.String
	ModifyTime             field.Time
	ModifyBy               field.String
	Deleted                field.Field
	SmsDeliveryNum         field.Int32
	MmsDeliveryNum         field.Int32
	GlobalSmsDeliveryNum   field.Int32
	GcOperationCosts       field.Float64
	CampaignServiceCosts   field.Float64

	fieldMap map[string]field.Expr
}

func (r report) Table(newTableName string) *report {
	r.reportDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r report) As(alias string) *report {
	r.reportDo.DO = *(r.reportDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *report) updateTableName(table string) *report {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.FiscalYear = field.NewString(table, "fiscal_year")
	r.Month = field.NewString(table, "month")
	r.Brand = field.NewString(table, "brand")
	r.Io = field.NewString(table, "io")
	r.EstimatedXChargeAmount = field.NewFloat64(table, "estimated_x_charge_amount")
	r.MsgDeliveryNum = field.NewInt32(table, "msg_delivery_num")
	r.BudgetOwner = field.NewString(table, "budget_owner")
	r.BrandFa = field.NewString(table, "brand_fa")
	r.RealXChargeAmount = field.NewFloat64(table, "real_x_charge_amount")
	r.XChargeStatus = field.NewBool(table, "x_charge_status")
	r.Remark = field.NewString(table, "remark")
	r.CreateTime = field.NewTime(table, "create_time")
	r.CreateBy = field.NewString(table, "create_by")
	r.ModifyTime = field.NewTime(table, "modify_time")
	r.ModifyBy = field.NewString(table, "modify_by")
	r.Deleted = field.NewField(table, "deleted")
	r.SmsDeliveryNum = field.NewInt32(table, "sms_delivery_num")
	r.MmsDeliveryNum = field.NewInt32(table, "mms_delivery_num")
	r.GlobalSmsDeliveryNum = field.NewInt32(table, "global_sms_delivery_num")
	r.GcOperationCosts = field.NewFloat64(table, "gc_operation_costs")
	r.CampaignServiceCosts = field.NewFloat64(table, "campaign_service_costs")

	r.fillFieldMap()

	return r
}

func (r *report) WithContext(ctx context.Context) *reportDo { return r.reportDo.WithContext(ctx) }

func (r report) TableName() string { return r.reportDo.TableName() }

func (r report) Alias() string { return r.reportDo.Alias() }

func (r report) Columns(cols ...field.Expr) gen.Columns { return r.reportDo.Columns(cols...) }

func (r *report) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *report) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 22)
	r.fieldMap["id"] = r.ID
	r.fieldMap["fiscal_year"] = r.FiscalYear
	r.fieldMap["month"] = r.Month
	r.fieldMap["brand"] = r.Brand
	r.fieldMap["io"] = r.Io
	r.fieldMap["estimated_x_charge_amount"] = r.EstimatedXChargeAmount
	r.fieldMap["msg_delivery_num"] = r.MsgDeliveryNum
	r.fieldMap["budget_owner"] = r.BudgetOwner
	r.fieldMap["brand_fa"] = r.BrandFa
	r.fieldMap["real_x_charge_amount"] = r.RealXChargeAmount
	r.fieldMap["x_charge_status"] = r.XChargeStatus
	r.fieldMap["remark"] = r.Remark
	r.fieldMap["create_time"] = r.CreateTime
	r.fieldMap["create_by"] = r.CreateBy
	r.fieldMap["modify_time"] = r.ModifyTime
	r.fieldMap["modify_by"] = r.ModifyBy
	r.fieldMap["deleted"] = r.Deleted
	r.fieldMap["sms_delivery_num"] = r.SmsDeliveryNum
	r.fieldMap["mms_delivery_num"] = r.MmsDeliveryNum
	r.fieldMap["global_sms_delivery_num"] = r.GlobalSmsDeliveryNum
	r.fieldMap["gc_operation_costs"] = r.GcOperationCosts
	r.fieldMap["campaign_service_costs"] = r.CampaignServiceCosts
}

func (r report) clone(db *gorm.DB) report {
	r.reportDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r report) replaceDB(db *gorm.DB) report {
	r.reportDo.ReplaceDB(db)
	return r
}

type reportDo struct{ gen.DO }

func (r reportDo) Debug() *reportDo {
	return r.withDO(r.DO.Debug())
}

func (r reportDo) WithContext(ctx context.Context) *reportDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r reportDo) ReadDB() *reportDo {
	return r.Clauses(dbresolver.Read)
}

func (r reportDo) WriteDB() *reportDo {
	return r.Clauses(dbresolver.Write)
}

func (r reportDo) Session(config *gorm.Session) *reportDo {
	return r.withDO(r.DO.Session(config))
}

func (r reportDo) Clauses(conds ...clause.Expression) *reportDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r reportDo) Returning(value interface{}, columns ...string) *reportDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r reportDo) Not(conds ...gen.Condition) *reportDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r reportDo) Or(conds ...gen.Condition) *reportDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r reportDo) Select(conds ...field.Expr) *reportDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r reportDo) Where(conds ...gen.Condition) *reportDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r reportDo) Order(conds ...field.Expr) *reportDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r reportDo) Distinct(cols ...field.Expr) *reportDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r reportDo) Omit(cols ...field.Expr) *reportDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r reportDo) Join(table schema.Tabler, on ...field.Expr) *reportDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r reportDo) LeftJoin(table schema.Tabler, on ...field.Expr) *reportDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r reportDo) RightJoin(table schema.Tabler, on ...field.Expr) *reportDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r reportDo) Group(cols ...field.Expr) *reportDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r reportDo) Having(conds ...gen.Condition) *reportDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r reportDo) Limit(limit int) *reportDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r reportDo) Offset(offset int) *reportDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r reportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *reportDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r reportDo) Unscoped() *reportDo {
	return r.withDO(r.DO.Unscoped())
}

func (r reportDo) Create(values ...*model.Report) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r reportDo) CreateInBatches(values []*model.Report, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r reportDo) Save(values ...*model.Report) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r reportDo) First() (*model.Report, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Report), nil
	}
}

func (r reportDo) Take() (*model.Report, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Report), nil
	}
}

func (r reportDo) Last() (*model.Report, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Report), nil
	}
}

func (r reportDo) Find() ([]*model.Report, error) {
	result, err := r.DO.Find()
	return result.([]*model.Report), err
}

func (r reportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Report, err error) {
	buf := make([]*model.Report, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r reportDo) FindInBatches(result *[]*model.Report, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r reportDo) Attrs(attrs ...field.AssignExpr) *reportDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r reportDo) Assign(attrs ...field.AssignExpr) *reportDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r reportDo) Joins(fields ...field.RelationField) *reportDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r reportDo) Preload(fields ...field.RelationField) *reportDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r reportDo) FirstOrInit() (*model.Report, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Report), nil
	}
}

func (r reportDo) FirstOrCreate() (*model.Report, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Report), nil
	}
}

func (r reportDo) FindByPage(offset int, limit int) (result []*model.Report, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r reportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r reportDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r reportDo) Delete(models ...*model.Report) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *reportDo) withDO(do gen.Dao) *reportDo {
	r.DO = *do.(*gen.DO)
	return r
}
