// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"sms/app/gateway/api/dao/model"
)

func newMessageHistory(db *gorm.DB, opts ...gen.DOOption) messageHistory {
	_messageHistory := messageHistory{}

	_messageHistory.messageHistoryDo.UseDB(db, opts...)
	_messageHistory.messageHistoryDo.UseModel(&model.MessageHistory{})

	tableName := _messageHistory.messageHistoryDo.TableName()
	_messageHistory.ALL = field.NewAsterisk(tableName)
	_messageHistory.ID = field.NewInt32(tableName, "id")

	_messageHistory.fillFieldMap()

	return _messageHistory
}

type messageHistory struct {
	messageHistoryDo messageHistoryDo

	ALL field.Asterisk
	ID  field.Int32

	fieldMap map[string]field.Expr
}

func (m messageHistory) Table(newTableName string) *messageHistory {
	m.messageHistoryDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m messageHistory) As(alias string) *messageHistory {
	m.messageHistoryDo.DO = *(m.messageHistoryDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *messageHistory) updateTableName(table string) *messageHistory {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")

	m.fillFieldMap()

	return m
}

func (m *messageHistory) WithContext(ctx context.Context) *messageHistoryDo {
	return m.messageHistoryDo.WithContext(ctx)
}

func (m messageHistory) TableName() string { return m.messageHistoryDo.TableName() }

func (m messageHistory) Alias() string { return m.messageHistoryDo.Alias() }

func (m messageHistory) Columns(cols ...field.Expr) gen.Columns {
	return m.messageHistoryDo.Columns(cols...)
}

func (m *messageHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *messageHistory) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 1)
	m.fieldMap["id"] = m.ID
}

func (m messageHistory) clone(db *gorm.DB) messageHistory {
	m.messageHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m messageHistory) replaceDB(db *gorm.DB) messageHistory {
	m.messageHistoryDo.ReplaceDB(db)
	return m
}

type messageHistoryDo struct{ gen.DO }

func (m messageHistoryDo) Debug() *messageHistoryDo {
	return m.withDO(m.DO.Debug())
}

func (m messageHistoryDo) WithContext(ctx context.Context) *messageHistoryDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m messageHistoryDo) ReadDB() *messageHistoryDo {
	return m.Clauses(dbresolver.Read)
}

func (m messageHistoryDo) WriteDB() *messageHistoryDo {
	return m.Clauses(dbresolver.Write)
}

func (m messageHistoryDo) Session(config *gorm.Session) *messageHistoryDo {
	return m.withDO(m.DO.Session(config))
}

func (m messageHistoryDo) Clauses(conds ...clause.Expression) *messageHistoryDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m messageHistoryDo) Returning(value interface{}, columns ...string) *messageHistoryDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m messageHistoryDo) Not(conds ...gen.Condition) *messageHistoryDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m messageHistoryDo) Or(conds ...gen.Condition) *messageHistoryDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m messageHistoryDo) Select(conds ...field.Expr) *messageHistoryDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m messageHistoryDo) Where(conds ...gen.Condition) *messageHistoryDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m messageHistoryDo) Order(conds ...field.Expr) *messageHistoryDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m messageHistoryDo) Distinct(cols ...field.Expr) *messageHistoryDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m messageHistoryDo) Omit(cols ...field.Expr) *messageHistoryDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m messageHistoryDo) Join(table schema.Tabler, on ...field.Expr) *messageHistoryDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m messageHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) *messageHistoryDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m messageHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) *messageHistoryDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m messageHistoryDo) Group(cols ...field.Expr) *messageHistoryDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m messageHistoryDo) Having(conds ...gen.Condition) *messageHistoryDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m messageHistoryDo) Limit(limit int) *messageHistoryDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m messageHistoryDo) Offset(offset int) *messageHistoryDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m messageHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *messageHistoryDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m messageHistoryDo) Unscoped() *messageHistoryDo {
	return m.withDO(m.DO.Unscoped())
}

func (m messageHistoryDo) Create(values ...*model.MessageHistory) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m messageHistoryDo) CreateInBatches(values []*model.MessageHistory, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m messageHistoryDo) Save(values ...*model.MessageHistory) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m messageHistoryDo) First() (*model.MessageHistory, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageHistory), nil
	}
}

func (m messageHistoryDo) Take() (*model.MessageHistory, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageHistory), nil
	}
}

func (m messageHistoryDo) Last() (*model.MessageHistory, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageHistory), nil
	}
}

func (m messageHistoryDo) Find() ([]*model.MessageHistory, error) {
	result, err := m.DO.Find()
	return result.([]*model.MessageHistory), err
}

func (m messageHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MessageHistory, err error) {
	buf := make([]*model.MessageHistory, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m messageHistoryDo) FindInBatches(result *[]*model.MessageHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m messageHistoryDo) Attrs(attrs ...field.AssignExpr) *messageHistoryDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m messageHistoryDo) Assign(attrs ...field.AssignExpr) *messageHistoryDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m messageHistoryDo) Joins(fields ...field.RelationField) *messageHistoryDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m messageHistoryDo) Preload(fields ...field.RelationField) *messageHistoryDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m messageHistoryDo) FirstOrInit() (*model.MessageHistory, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageHistory), nil
	}
}

func (m messageHistoryDo) FirstOrCreate() (*model.MessageHistory, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageHistory), nil
	}
}

func (m messageHistoryDo) FindByPage(offset int, limit int) (result []*model.MessageHistory, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m messageHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m messageHistoryDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m messageHistoryDo) Delete(models ...*model.MessageHistory) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *messageHistoryDo) withDO(do gen.Dao) *messageHistoryDo {
	m.DO = *do.(*gen.DO)
	return m
}
