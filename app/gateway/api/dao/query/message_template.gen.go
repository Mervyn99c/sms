// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"sms/app/gateway/api/dao/model"
)

func newMessageTemplate(db *gorm.DB, opts ...gen.DOOption) messageTemplate {
	_messageTemplate := messageTemplate{}

	_messageTemplate.messageTemplateDo.UseDB(db, opts...)
	_messageTemplate.messageTemplateDo.UseModel(&model.MessageTemplate{})

	tableName := _messageTemplate.messageTemplateDo.TableName()
	_messageTemplate.ALL = field.NewAsterisk(tableName)
	_messageTemplate.ID = field.NewInt64(tableName, "id")
	_messageTemplate.TemplateName = field.NewString(tableName, "template_name")
	_messageTemplate.TemplateCode = field.NewString(tableName, "template_code")
	_messageTemplate.Type = field.NewString(tableName, "type")
	_messageTemplate.Content = field.NewString(tableName, "content")
	_messageTemplate.CreateTime = field.NewTime(tableName, "create_time")
	_messageTemplate.CreateBy = field.NewString(tableName, "create_by")
	_messageTemplate.ModifyTime = field.NewTime(tableName, "modify_time")
	_messageTemplate.ModifyBy = field.NewString(tableName, "modify_by")
	_messageTemplate.Deleted = field.NewField(tableName, "deleted")
	_messageTemplate.BrandID = field.NewInt64(tableName, "brand_id")
	_messageTemplate.TokenID = field.NewString(tableName, "token_id")
	_messageTemplate.Sign = field.NewString(tableName, "sign")
	_messageTemplate.PrimaryISP = field.NewString(tableName, "primary_ISP")
	_messageTemplate.UserID = field.NewString(tableName, "user_id")
	_messageTemplate.ExtCode = field.NewString(tableName, "ext_code")
	_messageTemplate.Brand = field.NewString(tableName, "brand")
	_messageTemplate.Provider = field.NewString(tableName, "provider")
	_messageTemplate.Region = field.NewString(tableName, "region")
	_messageTemplate.Providers = field.NewString(tableName, "providers")
	_messageTemplate.DemanderIds = field.NewString(tableName, "demander_ids")

	_messageTemplate.fillFieldMap()

	return _messageTemplate
}

type messageTemplate struct {
	messageTemplateDo messageTemplateDo

	ALL          field.Asterisk
	ID           field.Int64
	TemplateName field.String
	TemplateCode field.String
	Type         field.String
	Content      field.String
	CreateTime   field.Time
	CreateBy     field.String
	ModifyTime   field.Time
	ModifyBy     field.String
	Deleted      field.Field
	BrandID      field.Int64
	TokenID      field.String
	Sign         field.String
	PrimaryISP   field.String
	UserID       field.String
	ExtCode      field.String
	Brand        field.String
	Provider     field.String
	Region       field.String // 国家地区
	Providers    field.String
	DemanderIds  field.String

	fieldMap map[string]field.Expr
}

func (m messageTemplate) Table(newTableName string) *messageTemplate {
	m.messageTemplateDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m messageTemplate) As(alias string) *messageTemplate {
	m.messageTemplateDo.DO = *(m.messageTemplateDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *messageTemplate) updateTableName(table string) *messageTemplate {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.TemplateName = field.NewString(table, "template_name")
	m.TemplateCode = field.NewString(table, "template_code")
	m.Type = field.NewString(table, "type")
	m.Content = field.NewString(table, "content")
	m.CreateTime = field.NewTime(table, "create_time")
	m.CreateBy = field.NewString(table, "create_by")
	m.ModifyTime = field.NewTime(table, "modify_time")
	m.ModifyBy = field.NewString(table, "modify_by")
	m.Deleted = field.NewField(table, "deleted")
	m.BrandID = field.NewInt64(table, "brand_id")
	m.TokenID = field.NewString(table, "token_id")
	m.Sign = field.NewString(table, "sign")
	m.PrimaryISP = field.NewString(table, "primary_ISP")
	m.UserID = field.NewString(table, "user_id")
	m.ExtCode = field.NewString(table, "ext_code")
	m.Brand = field.NewString(table, "brand")
	m.Provider = field.NewString(table, "provider")
	m.Region = field.NewString(table, "region")
	m.Providers = field.NewString(table, "providers")
	m.DemanderIds = field.NewString(table, "demander_ids")

	m.fillFieldMap()

	return m
}

func (m *messageTemplate) WithContext(ctx context.Context) *messageTemplateDo {
	return m.messageTemplateDo.WithContext(ctx)
}

func (m messageTemplate) TableName() string { return m.messageTemplateDo.TableName() }

func (m messageTemplate) Alias() string { return m.messageTemplateDo.Alias() }

func (m messageTemplate) Columns(cols ...field.Expr) gen.Columns {
	return m.messageTemplateDo.Columns(cols...)
}

func (m *messageTemplate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *messageTemplate) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 21)
	m.fieldMap["id"] = m.ID
	m.fieldMap["template_name"] = m.TemplateName
	m.fieldMap["template_code"] = m.TemplateCode
	m.fieldMap["type"] = m.Type
	m.fieldMap["content"] = m.Content
	m.fieldMap["create_time"] = m.CreateTime
	m.fieldMap["create_by"] = m.CreateBy
	m.fieldMap["modify_time"] = m.ModifyTime
	m.fieldMap["modify_by"] = m.ModifyBy
	m.fieldMap["deleted"] = m.Deleted
	m.fieldMap["brand_id"] = m.BrandID
	m.fieldMap["token_id"] = m.TokenID
	m.fieldMap["sign"] = m.Sign
	m.fieldMap["primary_ISP"] = m.PrimaryISP
	m.fieldMap["user_id"] = m.UserID
	m.fieldMap["ext_code"] = m.ExtCode
	m.fieldMap["brand"] = m.Brand
	m.fieldMap["provider"] = m.Provider
	m.fieldMap["region"] = m.Region
	m.fieldMap["providers"] = m.Providers
	m.fieldMap["demander_ids"] = m.DemanderIds
}

func (m messageTemplate) clone(db *gorm.DB) messageTemplate {
	m.messageTemplateDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m messageTemplate) replaceDB(db *gorm.DB) messageTemplate {
	m.messageTemplateDo.ReplaceDB(db)
	return m
}

type messageTemplateDo struct{ gen.DO }

func (m messageTemplateDo) Debug() *messageTemplateDo {
	return m.withDO(m.DO.Debug())
}

func (m messageTemplateDo) WithContext(ctx context.Context) *messageTemplateDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m messageTemplateDo) ReadDB() *messageTemplateDo {
	return m.Clauses(dbresolver.Read)
}

func (m messageTemplateDo) WriteDB() *messageTemplateDo {
	return m.Clauses(dbresolver.Write)
}

func (m messageTemplateDo) Session(config *gorm.Session) *messageTemplateDo {
	return m.withDO(m.DO.Session(config))
}

func (m messageTemplateDo) Clauses(conds ...clause.Expression) *messageTemplateDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m messageTemplateDo) Returning(value interface{}, columns ...string) *messageTemplateDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m messageTemplateDo) Not(conds ...gen.Condition) *messageTemplateDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m messageTemplateDo) Or(conds ...gen.Condition) *messageTemplateDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m messageTemplateDo) Select(conds ...field.Expr) *messageTemplateDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m messageTemplateDo) Where(conds ...gen.Condition) *messageTemplateDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m messageTemplateDo) Order(conds ...field.Expr) *messageTemplateDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m messageTemplateDo) Distinct(cols ...field.Expr) *messageTemplateDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m messageTemplateDo) Omit(cols ...field.Expr) *messageTemplateDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m messageTemplateDo) Join(table schema.Tabler, on ...field.Expr) *messageTemplateDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m messageTemplateDo) LeftJoin(table schema.Tabler, on ...field.Expr) *messageTemplateDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m messageTemplateDo) RightJoin(table schema.Tabler, on ...field.Expr) *messageTemplateDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m messageTemplateDo) Group(cols ...field.Expr) *messageTemplateDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m messageTemplateDo) Having(conds ...gen.Condition) *messageTemplateDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m messageTemplateDo) Limit(limit int) *messageTemplateDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m messageTemplateDo) Offset(offset int) *messageTemplateDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m messageTemplateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *messageTemplateDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m messageTemplateDo) Unscoped() *messageTemplateDo {
	return m.withDO(m.DO.Unscoped())
}

func (m messageTemplateDo) Create(values ...*model.MessageTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m messageTemplateDo) CreateInBatches(values []*model.MessageTemplate, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m messageTemplateDo) Save(values ...*model.MessageTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m messageTemplateDo) First() (*model.MessageTemplate, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageTemplate), nil
	}
}

func (m messageTemplateDo) Take() (*model.MessageTemplate, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageTemplate), nil
	}
}

func (m messageTemplateDo) Last() (*model.MessageTemplate, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageTemplate), nil
	}
}

func (m messageTemplateDo) Find() ([]*model.MessageTemplate, error) {
	result, err := m.DO.Find()
	return result.([]*model.MessageTemplate), err
}

func (m messageTemplateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MessageTemplate, err error) {
	buf := make([]*model.MessageTemplate, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m messageTemplateDo) FindInBatches(result *[]*model.MessageTemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m messageTemplateDo) Attrs(attrs ...field.AssignExpr) *messageTemplateDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m messageTemplateDo) Assign(attrs ...field.AssignExpr) *messageTemplateDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m messageTemplateDo) Joins(fields ...field.RelationField) *messageTemplateDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m messageTemplateDo) Preload(fields ...field.RelationField) *messageTemplateDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m messageTemplateDo) FirstOrInit() (*model.MessageTemplate, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageTemplate), nil
	}
}

func (m messageTemplateDo) FirstOrCreate() (*model.MessageTemplate, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageTemplate), nil
	}
}

func (m messageTemplateDo) FindByPage(offset int, limit int) (result []*model.MessageTemplate, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m messageTemplateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m messageTemplateDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m messageTemplateDo) Delete(models ...*model.MessageTemplate) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *messageTemplateDo) withDO(do gen.Dao) *messageTemplateDo {
	m.DO = *do.(*gen.DO)
	return m
}
