// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"sms/app/gateway/api/dao/model"
)

func newConsumer(db *gorm.DB, opts ...gen.DOOption) consumer {
	_consumer := consumer{}

	_consumer.consumerDo.UseDB(db, opts...)
	_consumer.consumerDo.UseModel(&model.Consumer{})

	tableName := _consumer.consumerDo.TableName()
	_consumer.ALL = field.NewAsterisk(tableName)
	_consumer.ID = field.NewInt64(tableName, "id")
	_consumer.ConsumerName = field.NewString(tableName, "consumer_name")
	_consumer.APIKey = field.NewString(tableName, "api_key")
	_consumer.APISecret = field.NewString(tableName, "api_secret")
	_consumer.CreateTime = field.NewTime(tableName, "create_time")
	_consumer.ModifyTime = field.NewTime(tableName, "modify_time")
	_consumer.CreateBy = field.NewString(tableName, "create_by")
	_consumer.ModifyBy = field.NewString(tableName, "modify_by")
	_consumer.Deleted = field.NewField(tableName, "deleted")

	_consumer.fillFieldMap()

	return _consumer
}

type consumer struct {
	consumerDo consumerDo

	ALL          field.Asterisk
	ID           field.Int64
	ConsumerName field.String
	APIKey       field.String
	APISecret    field.String
	CreateTime   field.Time
	ModifyTime   field.Time
	CreateBy     field.String
	ModifyBy     field.String
	Deleted      field.Field

	fieldMap map[string]field.Expr
}

func (c consumer) Table(newTableName string) *consumer {
	c.consumerDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c consumer) As(alias string) *consumer {
	c.consumerDo.DO = *(c.consumerDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *consumer) updateTableName(table string) *consumer {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.ConsumerName = field.NewString(table, "consumer_name")
	c.APIKey = field.NewString(table, "api_key")
	c.APISecret = field.NewString(table, "api_secret")
	c.CreateTime = field.NewTime(table, "create_time")
	c.ModifyTime = field.NewTime(table, "modify_time")
	c.CreateBy = field.NewString(table, "create_by")
	c.ModifyBy = field.NewString(table, "modify_by")
	c.Deleted = field.NewField(table, "deleted")

	c.fillFieldMap()

	return c
}

func (c *consumer) WithContext(ctx context.Context) *consumerDo { return c.consumerDo.WithContext(ctx) }

func (c consumer) TableName() string { return c.consumerDo.TableName() }

func (c consumer) Alias() string { return c.consumerDo.Alias() }

func (c consumer) Columns(cols ...field.Expr) gen.Columns { return c.consumerDo.Columns(cols...) }

func (c *consumer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *consumer) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.ID
	c.fieldMap["consumer_name"] = c.ConsumerName
	c.fieldMap["api_key"] = c.APIKey
	c.fieldMap["api_secret"] = c.APISecret
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["modify_time"] = c.ModifyTime
	c.fieldMap["create_by"] = c.CreateBy
	c.fieldMap["modify_by"] = c.ModifyBy
	c.fieldMap["deleted"] = c.Deleted
}

func (c consumer) clone(db *gorm.DB) consumer {
	c.consumerDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c consumer) replaceDB(db *gorm.DB) consumer {
	c.consumerDo.ReplaceDB(db)
	return c
}

type consumerDo struct{ gen.DO }

func (c consumerDo) Debug() *consumerDo {
	return c.withDO(c.DO.Debug())
}

func (c consumerDo) WithContext(ctx context.Context) *consumerDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c consumerDo) ReadDB() *consumerDo {
	return c.Clauses(dbresolver.Read)
}

func (c consumerDo) WriteDB() *consumerDo {
	return c.Clauses(dbresolver.Write)
}

func (c consumerDo) Session(config *gorm.Session) *consumerDo {
	return c.withDO(c.DO.Session(config))
}

func (c consumerDo) Clauses(conds ...clause.Expression) *consumerDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c consumerDo) Returning(value interface{}, columns ...string) *consumerDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c consumerDo) Not(conds ...gen.Condition) *consumerDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c consumerDo) Or(conds ...gen.Condition) *consumerDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c consumerDo) Select(conds ...field.Expr) *consumerDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c consumerDo) Where(conds ...gen.Condition) *consumerDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c consumerDo) Order(conds ...field.Expr) *consumerDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c consumerDo) Distinct(cols ...field.Expr) *consumerDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c consumerDo) Omit(cols ...field.Expr) *consumerDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c consumerDo) Join(table schema.Tabler, on ...field.Expr) *consumerDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c consumerDo) LeftJoin(table schema.Tabler, on ...field.Expr) *consumerDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c consumerDo) RightJoin(table schema.Tabler, on ...field.Expr) *consumerDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c consumerDo) Group(cols ...field.Expr) *consumerDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c consumerDo) Having(conds ...gen.Condition) *consumerDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c consumerDo) Limit(limit int) *consumerDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c consumerDo) Offset(offset int) *consumerDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c consumerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *consumerDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c consumerDo) Unscoped() *consumerDo {
	return c.withDO(c.DO.Unscoped())
}

func (c consumerDo) Create(values ...*model.Consumer) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c consumerDo) CreateInBatches(values []*model.Consumer, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c consumerDo) Save(values ...*model.Consumer) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c consumerDo) First() (*model.Consumer, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Consumer), nil
	}
}

func (c consumerDo) Take() (*model.Consumer, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Consumer), nil
	}
}

func (c consumerDo) Last() (*model.Consumer, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Consumer), nil
	}
}

func (c consumerDo) Find() ([]*model.Consumer, error) {
	result, err := c.DO.Find()
	return result.([]*model.Consumer), err
}

func (c consumerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Consumer, err error) {
	buf := make([]*model.Consumer, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c consumerDo) FindInBatches(result *[]*model.Consumer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c consumerDo) Attrs(attrs ...field.AssignExpr) *consumerDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c consumerDo) Assign(attrs ...field.AssignExpr) *consumerDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c consumerDo) Joins(fields ...field.RelationField) *consumerDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c consumerDo) Preload(fields ...field.RelationField) *consumerDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c consumerDo) FirstOrInit() (*model.Consumer, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Consumer), nil
	}
}

func (c consumerDo) FirstOrCreate() (*model.Consumer, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Consumer), nil
	}
}

func (c consumerDo) FindByPage(offset int, limit int) (result []*model.Consumer, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c consumerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c consumerDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c consumerDo) Delete(models ...*model.Consumer) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *consumerDo) withDO(do gen.Dao) *consumerDo {
	c.DO = *do.(*gen.DO)
	return c
}
