// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                   db,
		Consumer:             newConsumer(db, opts...),
		Demander:             newDemander(db, opts...),
		Dictionary:           newDictionary(db, opts...),
		MessageConfiguration: newMessageConfiguration(db, opts...),
		MessageHistory:       newMessageHistory(db, opts...),
		MessageTemplate:      newMessageTemplate(db, opts...),
		MsgProvider:          newMsgProvider(db, opts...),
		Report:               newReport(db, opts...),
		ReportDetail:         newReportDetail(db, opts...),
		Scene:                newScene(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Consumer             consumer
	Demander             demander
	Dictionary           dictionary
	MessageConfiguration messageConfiguration
	MessageHistory       messageHistory
	MessageTemplate      messageTemplate
	MsgProvider          msgProvider
	Report               report
	ReportDetail         reportDetail
	Scene                scene
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		Consumer:             q.Consumer.clone(db),
		Demander:             q.Demander.clone(db),
		Dictionary:           q.Dictionary.clone(db),
		MessageConfiguration: q.MessageConfiguration.clone(db),
		MessageHistory:       q.MessageHistory.clone(db),
		MessageTemplate:      q.MessageTemplate.clone(db),
		MsgProvider:          q.MsgProvider.clone(db),
		Report:               q.Report.clone(db),
		ReportDetail:         q.ReportDetail.clone(db),
		Scene:                q.Scene.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		Consumer:             q.Consumer.replaceDB(db),
		Demander:             q.Demander.replaceDB(db),
		Dictionary:           q.Dictionary.replaceDB(db),
		MessageConfiguration: q.MessageConfiguration.replaceDB(db),
		MessageHistory:       q.MessageHistory.replaceDB(db),
		MessageTemplate:      q.MessageTemplate.replaceDB(db),
		MsgProvider:          q.MsgProvider.replaceDB(db),
		Report:               q.Report.replaceDB(db),
		ReportDetail:         q.ReportDetail.replaceDB(db),
		Scene:                q.Scene.replaceDB(db),
	}
}

type queryCtx struct {
	Consumer             *consumerDo
	Demander             *demanderDo
	Dictionary           *dictionaryDo
	MessageConfiguration *messageConfigurationDo
	MessageHistory       *messageHistoryDo
	MessageTemplate      *messageTemplateDo
	MsgProvider          *msgProviderDo
	Report               *reportDo
	ReportDetail         *reportDetailDo
	Scene                *sceneDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Consumer:             q.Consumer.WithContext(ctx),
		Demander:             q.Demander.WithContext(ctx),
		Dictionary:           q.Dictionary.WithContext(ctx),
		MessageConfiguration: q.MessageConfiguration.WithContext(ctx),
		MessageHistory:       q.MessageHistory.WithContext(ctx),
		MessageTemplate:      q.MessageTemplate.WithContext(ctx),
		MsgProvider:          q.MsgProvider.WithContext(ctx),
		Report:               q.Report.WithContext(ctx),
		ReportDetail:         q.ReportDetail.WithContext(ctx),
		Scene:                q.Scene.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
