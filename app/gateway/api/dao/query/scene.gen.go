// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"sms/app/gateway/api/dao/model"
)

func newScene(db *gorm.DB, opts ...gen.DOOption) scene {
	_scene := scene{}

	_scene.sceneDo.UseDB(db, opts...)
	_scene.sceneDo.UseModel(&model.Scene{})

	tableName := _scene.sceneDo.TableName()
	_scene.ALL = field.NewAsterisk(tableName)
	_scene.ID = field.NewInt64(tableName, "id")
	_scene.ExtCode = field.NewInt32(tableName, "ext_code")
	_scene.Account = field.NewString(tableName, "account")
	_scene.MarketingProgramID = field.NewInt32(tableName, "marketing_program_id")
	_scene.App = field.NewString(tableName, "app")
	_scene.Sign = field.NewString(tableName, "sign")
	_scene.TokenID = field.NewString(tableName, "token_id")
	_scene.Prolonged = field.NewField(tableName, "prolonged")
	_scene.CreateTime = field.NewTime(tableName, "create_time")
	_scene.ModifyTime = field.NewTime(tableName, "modify_time")
	_scene.CreateBy = field.NewString(tableName, "create_by")
	_scene.ModifyBy = field.NewString(tableName, "modify_by")
	_scene.Deleted = field.NewField(tableName, "deleted")
	_scene.SceneResultTopic = field.NewString(tableName, "scene_result_topic")

	_scene.fillFieldMap()

	return _scene
}

type scene struct {
	sceneDo sceneDo

	ALL                field.Asterisk
	ID                 field.Int64
	ExtCode            field.Int32
	Account            field.String
	MarketingProgramID field.Int32
	App                field.String
	Sign               field.String
	TokenID            field.String
	Prolonged          field.Field
	CreateTime         field.Time
	ModifyTime         field.Time
	CreateBy           field.String
	ModifyBy           field.String
	Deleted            field.Field
	SceneResultTopic   field.String

	fieldMap map[string]field.Expr
}

func (s scene) Table(newTableName string) *scene {
	s.sceneDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scene) As(alias string) *scene {
	s.sceneDo.DO = *(s.sceneDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scene) updateTableName(table string) *scene {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.ExtCode = field.NewInt32(table, "ext_code")
	s.Account = field.NewString(table, "account")
	s.MarketingProgramID = field.NewInt32(table, "marketing_program_id")
	s.App = field.NewString(table, "app")
	s.Sign = field.NewString(table, "sign")
	s.TokenID = field.NewString(table, "token_id")
	s.Prolonged = field.NewField(table, "prolonged")
	s.CreateTime = field.NewTime(table, "create_time")
	s.ModifyTime = field.NewTime(table, "modify_time")
	s.CreateBy = field.NewString(table, "create_by")
	s.ModifyBy = field.NewString(table, "modify_by")
	s.Deleted = field.NewField(table, "deleted")
	s.SceneResultTopic = field.NewString(table, "scene_result_topic")

	s.fillFieldMap()

	return s
}

func (s *scene) WithContext(ctx context.Context) *sceneDo { return s.sceneDo.WithContext(ctx) }

func (s scene) TableName() string { return s.sceneDo.TableName() }

func (s scene) Alias() string { return s.sceneDo.Alias() }

func (s scene) Columns(cols ...field.Expr) gen.Columns { return s.sceneDo.Columns(cols...) }

func (s *scene) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scene) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 14)
	s.fieldMap["id"] = s.ID
	s.fieldMap["ext_code"] = s.ExtCode
	s.fieldMap["account"] = s.Account
	s.fieldMap["marketing_program_id"] = s.MarketingProgramID
	s.fieldMap["app"] = s.App
	s.fieldMap["sign"] = s.Sign
	s.fieldMap["token_id"] = s.TokenID
	s.fieldMap["prolonged"] = s.Prolonged
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["modify_time"] = s.ModifyTime
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["modify_by"] = s.ModifyBy
	s.fieldMap["deleted"] = s.Deleted
	s.fieldMap["scene_result_topic"] = s.SceneResultTopic
}

func (s scene) clone(db *gorm.DB) scene {
	s.sceneDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s scene) replaceDB(db *gorm.DB) scene {
	s.sceneDo.ReplaceDB(db)
	return s
}

type sceneDo struct{ gen.DO }

func (s sceneDo) Debug() *sceneDo {
	return s.withDO(s.DO.Debug())
}

func (s sceneDo) WithContext(ctx context.Context) *sceneDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sceneDo) ReadDB() *sceneDo {
	return s.Clauses(dbresolver.Read)
}

func (s sceneDo) WriteDB() *sceneDo {
	return s.Clauses(dbresolver.Write)
}

func (s sceneDo) Session(config *gorm.Session) *sceneDo {
	return s.withDO(s.DO.Session(config))
}

func (s sceneDo) Clauses(conds ...clause.Expression) *sceneDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sceneDo) Returning(value interface{}, columns ...string) *sceneDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sceneDo) Not(conds ...gen.Condition) *sceneDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sceneDo) Or(conds ...gen.Condition) *sceneDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sceneDo) Select(conds ...field.Expr) *sceneDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sceneDo) Where(conds ...gen.Condition) *sceneDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sceneDo) Order(conds ...field.Expr) *sceneDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sceneDo) Distinct(cols ...field.Expr) *sceneDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sceneDo) Omit(cols ...field.Expr) *sceneDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sceneDo) Join(table schema.Tabler, on ...field.Expr) *sceneDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sceneDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sceneDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sceneDo) RightJoin(table schema.Tabler, on ...field.Expr) *sceneDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sceneDo) Group(cols ...field.Expr) *sceneDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sceneDo) Having(conds ...gen.Condition) *sceneDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sceneDo) Limit(limit int) *sceneDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sceneDo) Offset(offset int) *sceneDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sceneDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sceneDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sceneDo) Unscoped() *sceneDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sceneDo) Create(values ...*model.Scene) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sceneDo) CreateInBatches(values []*model.Scene, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sceneDo) Save(values ...*model.Scene) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sceneDo) First() (*model.Scene, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Scene), nil
	}
}

func (s sceneDo) Take() (*model.Scene, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Scene), nil
	}
}

func (s sceneDo) Last() (*model.Scene, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Scene), nil
	}
}

func (s sceneDo) Find() ([]*model.Scene, error) {
	result, err := s.DO.Find()
	return result.([]*model.Scene), err
}

func (s sceneDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Scene, err error) {
	buf := make([]*model.Scene, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sceneDo) FindInBatches(result *[]*model.Scene, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sceneDo) Attrs(attrs ...field.AssignExpr) *sceneDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sceneDo) Assign(attrs ...field.AssignExpr) *sceneDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sceneDo) Joins(fields ...field.RelationField) *sceneDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sceneDo) Preload(fields ...field.RelationField) *sceneDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sceneDo) FirstOrInit() (*model.Scene, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Scene), nil
	}
}

func (s sceneDo) FirstOrCreate() (*model.Scene, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Scene), nil
	}
}

func (s sceneDo) FindByPage(offset int, limit int) (result []*model.Scene, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sceneDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sceneDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sceneDo) Delete(models ...*model.Scene) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sceneDo) withDO(do gen.Dao) *sceneDo {
	s.DO = *do.(*gen.DO)
	return s
}
