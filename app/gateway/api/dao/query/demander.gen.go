// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"sms/app/gateway/api/dao/model"
)

func newDemander(db *gorm.DB, opts ...gen.DOOption) demander {
	_demander := demander{}

	_demander.demanderDo.UseDB(db, opts...)
	_demander.demanderDo.UseModel(&model.Demander{})

	tableName := _demander.demanderDo.TableName()
	_demander.ALL = field.NewAsterisk(tableName)
	_demander.ID = field.NewInt64(tableName, "id")
	_demander.Category = field.NewString(tableName, "category")
	_demander.Brand = field.NewString(tableName, "brand")
	_demander.Io = field.NewString(tableName, "io")
	_demander.FiscalYear = field.NewString(tableName, "fiscal_year")
	_demander.BudgetOwner = field.NewString(tableName, "budget_owner")
	_demander.BrandFa = field.NewString(tableName, "brand_fa")
	_demander.CreateTime = field.NewTime(tableName, "create_time")
	_demander.CreateBy = field.NewString(tableName, "create_by")
	_demander.ModifyTime = field.NewTime(tableName, "modify_time")
	_demander.ModifyBy = field.NewString(tableName, "modify_by")
	_demander.Deleted = field.NewField(tableName, "deleted")

	_demander.fillFieldMap()

	return _demander
}

type demander struct {
	demanderDo demanderDo

	ALL         field.Asterisk
	ID          field.Int64
	Category    field.String
	Brand       field.String
	Io          field.String
	FiscalYear  field.String
	BudgetOwner field.String
	BrandFa     field.String
	CreateTime  field.Time
	CreateBy    field.String
	ModifyTime  field.Time
	ModifyBy    field.String
	Deleted     field.Field

	fieldMap map[string]field.Expr
}

func (d demander) Table(newTableName string) *demander {
	d.demanderDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d demander) As(alias string) *demander {
	d.demanderDo.DO = *(d.demanderDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *demander) updateTableName(table string) *demander {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.Category = field.NewString(table, "category")
	d.Brand = field.NewString(table, "brand")
	d.Io = field.NewString(table, "io")
	d.FiscalYear = field.NewString(table, "fiscal_year")
	d.BudgetOwner = field.NewString(table, "budget_owner")
	d.BrandFa = field.NewString(table, "brand_fa")
	d.CreateTime = field.NewTime(table, "create_time")
	d.CreateBy = field.NewString(table, "create_by")
	d.ModifyTime = field.NewTime(table, "modify_time")
	d.ModifyBy = field.NewString(table, "modify_by")
	d.Deleted = field.NewField(table, "deleted")

	d.fillFieldMap()

	return d
}

func (d *demander) WithContext(ctx context.Context) *demanderDo { return d.demanderDo.WithContext(ctx) }

func (d demander) TableName() string { return d.demanderDo.TableName() }

func (d demander) Alias() string { return d.demanderDo.Alias() }

func (d demander) Columns(cols ...field.Expr) gen.Columns { return d.demanderDo.Columns(cols...) }

func (d *demander) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *demander) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 12)
	d.fieldMap["id"] = d.ID
	d.fieldMap["category"] = d.Category
	d.fieldMap["brand"] = d.Brand
	d.fieldMap["io"] = d.Io
	d.fieldMap["fiscal_year"] = d.FiscalYear
	d.fieldMap["budget_owner"] = d.BudgetOwner
	d.fieldMap["brand_fa"] = d.BrandFa
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["create_by"] = d.CreateBy
	d.fieldMap["modify_time"] = d.ModifyTime
	d.fieldMap["modify_by"] = d.ModifyBy
	d.fieldMap["deleted"] = d.Deleted
}

func (d demander) clone(db *gorm.DB) demander {
	d.demanderDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d demander) replaceDB(db *gorm.DB) demander {
	d.demanderDo.ReplaceDB(db)
	return d
}

type demanderDo struct{ gen.DO }

func (d demanderDo) Debug() *demanderDo {
	return d.withDO(d.DO.Debug())
}

func (d demanderDo) WithContext(ctx context.Context) *demanderDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d demanderDo) ReadDB() *demanderDo {
	return d.Clauses(dbresolver.Read)
}

func (d demanderDo) WriteDB() *demanderDo {
	return d.Clauses(dbresolver.Write)
}

func (d demanderDo) Session(config *gorm.Session) *demanderDo {
	return d.withDO(d.DO.Session(config))
}

func (d demanderDo) Clauses(conds ...clause.Expression) *demanderDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d demanderDo) Returning(value interface{}, columns ...string) *demanderDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d demanderDo) Not(conds ...gen.Condition) *demanderDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d demanderDo) Or(conds ...gen.Condition) *demanderDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d demanderDo) Select(conds ...field.Expr) *demanderDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d demanderDo) Where(conds ...gen.Condition) *demanderDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d demanderDo) Order(conds ...field.Expr) *demanderDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d demanderDo) Distinct(cols ...field.Expr) *demanderDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d demanderDo) Omit(cols ...field.Expr) *demanderDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d demanderDo) Join(table schema.Tabler, on ...field.Expr) *demanderDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d demanderDo) LeftJoin(table schema.Tabler, on ...field.Expr) *demanderDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d demanderDo) RightJoin(table schema.Tabler, on ...field.Expr) *demanderDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d demanderDo) Group(cols ...field.Expr) *demanderDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d demanderDo) Having(conds ...gen.Condition) *demanderDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d demanderDo) Limit(limit int) *demanderDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d demanderDo) Offset(offset int) *demanderDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d demanderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *demanderDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d demanderDo) Unscoped() *demanderDo {
	return d.withDO(d.DO.Unscoped())
}

func (d demanderDo) Create(values ...*model.Demander) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d demanderDo) CreateInBatches(values []*model.Demander, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d demanderDo) Save(values ...*model.Demander) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d demanderDo) First() (*model.Demander, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Demander), nil
	}
}

func (d demanderDo) Take() (*model.Demander, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Demander), nil
	}
}

func (d demanderDo) Last() (*model.Demander, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Demander), nil
	}
}

func (d demanderDo) Find() ([]*model.Demander, error) {
	result, err := d.DO.Find()
	return result.([]*model.Demander), err
}

func (d demanderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Demander, err error) {
	buf := make([]*model.Demander, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d demanderDo) FindInBatches(result *[]*model.Demander, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d demanderDo) Attrs(attrs ...field.AssignExpr) *demanderDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d demanderDo) Assign(attrs ...field.AssignExpr) *demanderDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d demanderDo) Joins(fields ...field.RelationField) *demanderDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d demanderDo) Preload(fields ...field.RelationField) *demanderDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d demanderDo) FirstOrInit() (*model.Demander, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Demander), nil
	}
}

func (d demanderDo) FirstOrCreate() (*model.Demander, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Demander), nil
	}
}

func (d demanderDo) FindByPage(offset int, limit int) (result []*model.Demander, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d demanderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d demanderDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d demanderDo) Delete(models ...*model.Demander) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *demanderDo) withDO(do gen.Dao) *demanderDo {
	d.DO = *do.(*gen.DO)
	return d
}
