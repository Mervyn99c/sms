// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"sms/app/gateway/api/dao/model"
)

func newDictionary(db *gorm.DB, opts ...gen.DOOption) dictionary {
	_dictionary := dictionary{}

	_dictionary.dictionaryDo.UseDB(db, opts...)
	_dictionary.dictionaryDo.UseModel(&model.Dictionary{})

	tableName := _dictionary.dictionaryDo.TableName()
	_dictionary.ALL = field.NewAsterisk(tableName)
	_dictionary.ID = field.NewInt64(tableName, "id")
	_dictionary.Label = field.NewString(tableName, "label")
	_dictionary.Value = field.NewString(tableName, "value")
	_dictionary.Type = field.NewString(tableName, "type")
	_dictionary.PIds = field.NewString(tableName, "pIds")

	_dictionary.fillFieldMap()

	return _dictionary
}

type dictionary struct {
	dictionaryDo dictionaryDo

	ALL   field.Asterisk
	ID    field.Int64
	Label field.String
	Value field.String
	Type  field.String
	PIds  field.String

	fieldMap map[string]field.Expr
}

func (d dictionary) Table(newTableName string) *dictionary {
	d.dictionaryDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dictionary) As(alias string) *dictionary {
	d.dictionaryDo.DO = *(d.dictionaryDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dictionary) updateTableName(table string) *dictionary {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.Label = field.NewString(table, "label")
	d.Value = field.NewString(table, "value")
	d.Type = field.NewString(table, "type")
	d.PIds = field.NewString(table, "pIds")

	d.fillFieldMap()

	return d
}

func (d *dictionary) WithContext(ctx context.Context) *dictionaryDo {
	return d.dictionaryDo.WithContext(ctx)
}

func (d dictionary) TableName() string { return d.dictionaryDo.TableName() }

func (d dictionary) Alias() string { return d.dictionaryDo.Alias() }

func (d dictionary) Columns(cols ...field.Expr) gen.Columns { return d.dictionaryDo.Columns(cols...) }

func (d *dictionary) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dictionary) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 5)
	d.fieldMap["id"] = d.ID
	d.fieldMap["label"] = d.Label
	d.fieldMap["value"] = d.Value
	d.fieldMap["type"] = d.Type
	d.fieldMap["pIds"] = d.PIds
}

func (d dictionary) clone(db *gorm.DB) dictionary {
	d.dictionaryDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dictionary) replaceDB(db *gorm.DB) dictionary {
	d.dictionaryDo.ReplaceDB(db)
	return d
}

type dictionaryDo struct{ gen.DO }

func (d dictionaryDo) Debug() *dictionaryDo {
	return d.withDO(d.DO.Debug())
}

func (d dictionaryDo) WithContext(ctx context.Context) *dictionaryDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dictionaryDo) ReadDB() *dictionaryDo {
	return d.Clauses(dbresolver.Read)
}

func (d dictionaryDo) WriteDB() *dictionaryDo {
	return d.Clauses(dbresolver.Write)
}

func (d dictionaryDo) Session(config *gorm.Session) *dictionaryDo {
	return d.withDO(d.DO.Session(config))
}

func (d dictionaryDo) Clauses(conds ...clause.Expression) *dictionaryDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dictionaryDo) Returning(value interface{}, columns ...string) *dictionaryDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dictionaryDo) Not(conds ...gen.Condition) *dictionaryDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dictionaryDo) Or(conds ...gen.Condition) *dictionaryDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dictionaryDo) Select(conds ...field.Expr) *dictionaryDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dictionaryDo) Where(conds ...gen.Condition) *dictionaryDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dictionaryDo) Order(conds ...field.Expr) *dictionaryDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dictionaryDo) Distinct(cols ...field.Expr) *dictionaryDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dictionaryDo) Omit(cols ...field.Expr) *dictionaryDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dictionaryDo) Join(table schema.Tabler, on ...field.Expr) *dictionaryDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dictionaryDo) LeftJoin(table schema.Tabler, on ...field.Expr) *dictionaryDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dictionaryDo) RightJoin(table schema.Tabler, on ...field.Expr) *dictionaryDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dictionaryDo) Group(cols ...field.Expr) *dictionaryDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dictionaryDo) Having(conds ...gen.Condition) *dictionaryDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dictionaryDo) Limit(limit int) *dictionaryDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dictionaryDo) Offset(offset int) *dictionaryDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dictionaryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *dictionaryDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dictionaryDo) Unscoped() *dictionaryDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dictionaryDo) Create(values ...*model.Dictionary) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dictionaryDo) CreateInBatches(values []*model.Dictionary, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dictionaryDo) Save(values ...*model.Dictionary) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dictionaryDo) First() (*model.Dictionary, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dictionary), nil
	}
}

func (d dictionaryDo) Take() (*model.Dictionary, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dictionary), nil
	}
}

func (d dictionaryDo) Last() (*model.Dictionary, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dictionary), nil
	}
}

func (d dictionaryDo) Find() ([]*model.Dictionary, error) {
	result, err := d.DO.Find()
	return result.([]*model.Dictionary), err
}

func (d dictionaryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dictionary, err error) {
	buf := make([]*model.Dictionary, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dictionaryDo) FindInBatches(result *[]*model.Dictionary, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dictionaryDo) Attrs(attrs ...field.AssignExpr) *dictionaryDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dictionaryDo) Assign(attrs ...field.AssignExpr) *dictionaryDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dictionaryDo) Joins(fields ...field.RelationField) *dictionaryDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dictionaryDo) Preload(fields ...field.RelationField) *dictionaryDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dictionaryDo) FirstOrInit() (*model.Dictionary, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dictionary), nil
	}
}

func (d dictionaryDo) FirstOrCreate() (*model.Dictionary, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dictionary), nil
	}
}

func (d dictionaryDo) FindByPage(offset int, limit int) (result []*model.Dictionary, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dictionaryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dictionaryDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dictionaryDo) Delete(models ...*model.Dictionary) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dictionaryDo) withDO(do gen.Dao) *dictionaryDo {
	d.DO = *do.(*gen.DO)
	return d
}
