// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"sms/app/gateway/api/dao/model"
)

func newMessageConfiguration(db *gorm.DB, opts ...gen.DOOption) messageConfiguration {
	_messageConfiguration := messageConfiguration{}

	_messageConfiguration.messageConfigurationDo.UseDB(db, opts...)
	_messageConfiguration.messageConfigurationDo.UseModel(&model.MessageConfiguration{})

	tableName := _messageConfiguration.messageConfigurationDo.TableName()
	_messageConfiguration.ALL = field.NewAsterisk(tableName)
	_messageConfiguration.ID = field.NewInt64(tableName, "id")
	_messageConfiguration.ConfigKey = field.NewString(tableName, "config_key")
	_messageConfiguration.ConfigValue = field.NewString(tableName, "config_value")
	_messageConfiguration.CreateTime = field.NewTime(tableName, "create_time")
	_messageConfiguration.CreateBy = field.NewString(tableName, "create_by")
	_messageConfiguration.ModifyTime = field.NewTime(tableName, "modify_time")
	_messageConfiguration.ModifyBy = field.NewString(tableName, "modify_by")
	_messageConfiguration.TemplateCode = field.NewString(tableName, "template_code")
	_messageConfiguration.Deleted = field.NewField(tableName, "deleted")

	_messageConfiguration.fillFieldMap()

	return _messageConfiguration
}

type messageConfiguration struct {
	messageConfigurationDo messageConfigurationDo

	ALL          field.Asterisk
	ID           field.Int64
	ConfigKey    field.String
	ConfigValue  field.String
	CreateTime   field.Time
	CreateBy     field.String
	ModifyTime   field.Time
	ModifyBy     field.String
	TemplateCode field.String
	Deleted      field.Field

	fieldMap map[string]field.Expr
}

func (m messageConfiguration) Table(newTableName string) *messageConfiguration {
	m.messageConfigurationDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m messageConfiguration) As(alias string) *messageConfiguration {
	m.messageConfigurationDo.DO = *(m.messageConfigurationDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *messageConfiguration) updateTableName(table string) *messageConfiguration {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.ConfigKey = field.NewString(table, "config_key")
	m.ConfigValue = field.NewString(table, "config_value")
	m.CreateTime = field.NewTime(table, "create_time")
	m.CreateBy = field.NewString(table, "create_by")
	m.ModifyTime = field.NewTime(table, "modify_time")
	m.ModifyBy = field.NewString(table, "modify_by")
	m.TemplateCode = field.NewString(table, "template_code")
	m.Deleted = field.NewField(table, "deleted")

	m.fillFieldMap()

	return m
}

func (m *messageConfiguration) WithContext(ctx context.Context) *messageConfigurationDo {
	return m.messageConfigurationDo.WithContext(ctx)
}

func (m messageConfiguration) TableName() string { return m.messageConfigurationDo.TableName() }

func (m messageConfiguration) Alias() string { return m.messageConfigurationDo.Alias() }

func (m messageConfiguration) Columns(cols ...field.Expr) gen.Columns {
	return m.messageConfigurationDo.Columns(cols...)
}

func (m *messageConfiguration) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *messageConfiguration) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 9)
	m.fieldMap["id"] = m.ID
	m.fieldMap["config_key"] = m.ConfigKey
	m.fieldMap["config_value"] = m.ConfigValue
	m.fieldMap["create_time"] = m.CreateTime
	m.fieldMap["create_by"] = m.CreateBy
	m.fieldMap["modify_time"] = m.ModifyTime
	m.fieldMap["modify_by"] = m.ModifyBy
	m.fieldMap["template_code"] = m.TemplateCode
	m.fieldMap["deleted"] = m.Deleted
}

func (m messageConfiguration) clone(db *gorm.DB) messageConfiguration {
	m.messageConfigurationDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m messageConfiguration) replaceDB(db *gorm.DB) messageConfiguration {
	m.messageConfigurationDo.ReplaceDB(db)
	return m
}

type messageConfigurationDo struct{ gen.DO }

func (m messageConfigurationDo) Debug() *messageConfigurationDo {
	return m.withDO(m.DO.Debug())
}

func (m messageConfigurationDo) WithContext(ctx context.Context) *messageConfigurationDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m messageConfigurationDo) ReadDB() *messageConfigurationDo {
	return m.Clauses(dbresolver.Read)
}

func (m messageConfigurationDo) WriteDB() *messageConfigurationDo {
	return m.Clauses(dbresolver.Write)
}

func (m messageConfigurationDo) Session(config *gorm.Session) *messageConfigurationDo {
	return m.withDO(m.DO.Session(config))
}

func (m messageConfigurationDo) Clauses(conds ...clause.Expression) *messageConfigurationDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m messageConfigurationDo) Returning(value interface{}, columns ...string) *messageConfigurationDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m messageConfigurationDo) Not(conds ...gen.Condition) *messageConfigurationDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m messageConfigurationDo) Or(conds ...gen.Condition) *messageConfigurationDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m messageConfigurationDo) Select(conds ...field.Expr) *messageConfigurationDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m messageConfigurationDo) Where(conds ...gen.Condition) *messageConfigurationDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m messageConfigurationDo) Order(conds ...field.Expr) *messageConfigurationDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m messageConfigurationDo) Distinct(cols ...field.Expr) *messageConfigurationDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m messageConfigurationDo) Omit(cols ...field.Expr) *messageConfigurationDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m messageConfigurationDo) Join(table schema.Tabler, on ...field.Expr) *messageConfigurationDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m messageConfigurationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *messageConfigurationDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m messageConfigurationDo) RightJoin(table schema.Tabler, on ...field.Expr) *messageConfigurationDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m messageConfigurationDo) Group(cols ...field.Expr) *messageConfigurationDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m messageConfigurationDo) Having(conds ...gen.Condition) *messageConfigurationDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m messageConfigurationDo) Limit(limit int) *messageConfigurationDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m messageConfigurationDo) Offset(offset int) *messageConfigurationDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m messageConfigurationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *messageConfigurationDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m messageConfigurationDo) Unscoped() *messageConfigurationDo {
	return m.withDO(m.DO.Unscoped())
}

func (m messageConfigurationDo) Create(values ...*model.MessageConfiguration) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m messageConfigurationDo) CreateInBatches(values []*model.MessageConfiguration, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m messageConfigurationDo) Save(values ...*model.MessageConfiguration) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m messageConfigurationDo) First() (*model.MessageConfiguration, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageConfiguration), nil
	}
}

func (m messageConfigurationDo) Take() (*model.MessageConfiguration, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageConfiguration), nil
	}
}

func (m messageConfigurationDo) Last() (*model.MessageConfiguration, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageConfiguration), nil
	}
}

func (m messageConfigurationDo) Find() ([]*model.MessageConfiguration, error) {
	result, err := m.DO.Find()
	return result.([]*model.MessageConfiguration), err
}

func (m messageConfigurationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MessageConfiguration, err error) {
	buf := make([]*model.MessageConfiguration, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m messageConfigurationDo) FindInBatches(result *[]*model.MessageConfiguration, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m messageConfigurationDo) Attrs(attrs ...field.AssignExpr) *messageConfigurationDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m messageConfigurationDo) Assign(attrs ...field.AssignExpr) *messageConfigurationDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m messageConfigurationDo) Joins(fields ...field.RelationField) *messageConfigurationDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m messageConfigurationDo) Preload(fields ...field.RelationField) *messageConfigurationDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m messageConfigurationDo) FirstOrInit() (*model.MessageConfiguration, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageConfiguration), nil
	}
}

func (m messageConfigurationDo) FirstOrCreate() (*model.MessageConfiguration, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageConfiguration), nil
	}
}

func (m messageConfigurationDo) FindByPage(offset int, limit int) (result []*model.MessageConfiguration, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m messageConfigurationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m messageConfigurationDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m messageConfigurationDo) Delete(models ...*model.MessageConfiguration) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *messageConfigurationDo) withDO(do gen.Dao) *messageConfigurationDo {
	m.DO = *do.(*gen.DO)
	return m
}
