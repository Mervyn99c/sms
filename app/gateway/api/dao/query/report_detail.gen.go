// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"sms/app/gateway/api/dao/model"
)

func newReportDetail(db *gorm.DB, opts ...gen.DOOption) reportDetail {
	_reportDetail := reportDetail{}

	_reportDetail.reportDetailDo.UseDB(db, opts...)
	_reportDetail.reportDetailDo.UseModel(&model.ReportDetail{})

	tableName := _reportDetail.reportDetailDo.TableName()
	_reportDetail.ALL = field.NewAsterisk(tableName)
	_reportDetail.ID = field.NewInt64(tableName, "id")
	_reportDetail.Date = field.NewString(tableName, "date")
	_reportDetail.Category = field.NewString(tableName, "category")
	_reportDetail.Brand = field.NewString(tableName, "brand")
	_reportDetail.BudgetOwner = field.NewString(tableName, "budget_owner")
	_reportDetail.Io = field.NewString(tableName, "io")
	_reportDetail.MessageType = field.NewString(tableName, "message_type")
	_reportDetail.StartTime = field.NewString(tableName, "start_time")
	_reportDetail.Vendor = field.NewString(tableName, "vendor")
	_reportDetail.CampaignName = field.NewString(tableName, "campaign_name")
	_reportDetail.CampaignID = field.NewString(tableName, "campaign_id")
	_reportDetail.ExtCode = field.NewString(tableName, "ext_code")
	_reportDetail.Region = field.NewString(tableName, "region")
	_reportDetail.Sign = field.NewString(tableName, "sign")
	_reportDetail.MsgDeliveryNum = field.NewInt32(tableName, "msg_delivery_num")
	_reportDetail.MsgSucceedNum = field.NewInt32(tableName, "msg_succeed_num")
	_reportDetail.MsgSucceedPercent = field.NewString(tableName, "msg_succeed_percent")
	_reportDetail.PeopleSucceedNum = field.NewInt32(tableName, "people_succeed_num")
	_reportDetail.CreateTime = field.NewTime(tableName, "create_time")
	_reportDetail.CreateBy = field.NewString(tableName, "create_by")
	_reportDetail.ModifyTime = field.NewTime(tableName, "modify_time")
	_reportDetail.ModifyBy = field.NewString(tableName, "modify_by")
	_reportDetail.Deleted = field.NewField(tableName, "deleted")
	_reportDetail.Month = field.NewString(tableName, "month")
	_reportDetail.FiscalYear = field.NewString(tableName, "fiscal_year")
	_reportDetail.BrandFa = field.NewString(tableName, "brand_fa")

	_reportDetail.fillFieldMap()

	return _reportDetail
}

type reportDetail struct {
	reportDetailDo reportDetailDo

	ALL               field.Asterisk
	ID                field.Int64
	Date              field.String
	Category          field.String
	Brand             field.String
	BudgetOwner       field.String
	Io                field.String
	MessageType       field.String
	StartTime         field.String
	Vendor            field.String
	CampaignName      field.String
	CampaignID        field.String
	ExtCode           field.String
	Region            field.String
	Sign              field.String
	MsgDeliveryNum    field.Int32
	MsgSucceedNum     field.Int32
	MsgSucceedPercent field.String
	PeopleSucceedNum  field.Int32
	CreateTime        field.Time
	CreateBy          field.String
	ModifyTime        field.Time
	ModifyBy          field.String
	Deleted           field.Field
	Month             field.String
	FiscalYear        field.String
	BrandFa           field.String

	fieldMap map[string]field.Expr
}

func (r reportDetail) Table(newTableName string) *reportDetail {
	r.reportDetailDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r reportDetail) As(alias string) *reportDetail {
	r.reportDetailDo.DO = *(r.reportDetailDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *reportDetail) updateTableName(table string) *reportDetail {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.Date = field.NewString(table, "date")
	r.Category = field.NewString(table, "category")
	r.Brand = field.NewString(table, "brand")
	r.BudgetOwner = field.NewString(table, "budget_owner")
	r.Io = field.NewString(table, "io")
	r.MessageType = field.NewString(table, "message_type")
	r.StartTime = field.NewString(table, "start_time")
	r.Vendor = field.NewString(table, "vendor")
	r.CampaignName = field.NewString(table, "campaign_name")
	r.CampaignID = field.NewString(table, "campaign_id")
	r.ExtCode = field.NewString(table, "ext_code")
	r.Region = field.NewString(table, "region")
	r.Sign = field.NewString(table, "sign")
	r.MsgDeliveryNum = field.NewInt32(table, "msg_delivery_num")
	r.MsgSucceedNum = field.NewInt32(table, "msg_succeed_num")
	r.MsgSucceedPercent = field.NewString(table, "msg_succeed_percent")
	r.PeopleSucceedNum = field.NewInt32(table, "people_succeed_num")
	r.CreateTime = field.NewTime(table, "create_time")
	r.CreateBy = field.NewString(table, "create_by")
	r.ModifyTime = field.NewTime(table, "modify_time")
	r.ModifyBy = field.NewString(table, "modify_by")
	r.Deleted = field.NewField(table, "deleted")
	r.Month = field.NewString(table, "month")
	r.FiscalYear = field.NewString(table, "fiscal_year")
	r.BrandFa = field.NewString(table, "brand_fa")

	r.fillFieldMap()

	return r
}

func (r *reportDetail) WithContext(ctx context.Context) *reportDetailDo {
	return r.reportDetailDo.WithContext(ctx)
}

func (r reportDetail) TableName() string { return r.reportDetailDo.TableName() }

func (r reportDetail) Alias() string { return r.reportDetailDo.Alias() }

func (r reportDetail) Columns(cols ...field.Expr) gen.Columns {
	return r.reportDetailDo.Columns(cols...)
}

func (r *reportDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *reportDetail) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 26)
	r.fieldMap["id"] = r.ID
	r.fieldMap["date"] = r.Date
	r.fieldMap["category"] = r.Category
	r.fieldMap["brand"] = r.Brand
	r.fieldMap["budget_owner"] = r.BudgetOwner
	r.fieldMap["io"] = r.Io
	r.fieldMap["message_type"] = r.MessageType
	r.fieldMap["start_time"] = r.StartTime
	r.fieldMap["vendor"] = r.Vendor
	r.fieldMap["campaign_name"] = r.CampaignName
	r.fieldMap["campaign_id"] = r.CampaignID
	r.fieldMap["ext_code"] = r.ExtCode
	r.fieldMap["region"] = r.Region
	r.fieldMap["sign"] = r.Sign
	r.fieldMap["msg_delivery_num"] = r.MsgDeliveryNum
	r.fieldMap["msg_succeed_num"] = r.MsgSucceedNum
	r.fieldMap["msg_succeed_percent"] = r.MsgSucceedPercent
	r.fieldMap["people_succeed_num"] = r.PeopleSucceedNum
	r.fieldMap["create_time"] = r.CreateTime
	r.fieldMap["create_by"] = r.CreateBy
	r.fieldMap["modify_time"] = r.ModifyTime
	r.fieldMap["modify_by"] = r.ModifyBy
	r.fieldMap["deleted"] = r.Deleted
	r.fieldMap["month"] = r.Month
	r.fieldMap["fiscal_year"] = r.FiscalYear
	r.fieldMap["brand_fa"] = r.BrandFa
}

func (r reportDetail) clone(db *gorm.DB) reportDetail {
	r.reportDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r reportDetail) replaceDB(db *gorm.DB) reportDetail {
	r.reportDetailDo.ReplaceDB(db)
	return r
}

type reportDetailDo struct{ gen.DO }

func (r reportDetailDo) Debug() *reportDetailDo {
	return r.withDO(r.DO.Debug())
}

func (r reportDetailDo) WithContext(ctx context.Context) *reportDetailDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r reportDetailDo) ReadDB() *reportDetailDo {
	return r.Clauses(dbresolver.Read)
}

func (r reportDetailDo) WriteDB() *reportDetailDo {
	return r.Clauses(dbresolver.Write)
}

func (r reportDetailDo) Session(config *gorm.Session) *reportDetailDo {
	return r.withDO(r.DO.Session(config))
}

func (r reportDetailDo) Clauses(conds ...clause.Expression) *reportDetailDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r reportDetailDo) Returning(value interface{}, columns ...string) *reportDetailDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r reportDetailDo) Not(conds ...gen.Condition) *reportDetailDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r reportDetailDo) Or(conds ...gen.Condition) *reportDetailDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r reportDetailDo) Select(conds ...field.Expr) *reportDetailDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r reportDetailDo) Where(conds ...gen.Condition) *reportDetailDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r reportDetailDo) Order(conds ...field.Expr) *reportDetailDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r reportDetailDo) Distinct(cols ...field.Expr) *reportDetailDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r reportDetailDo) Omit(cols ...field.Expr) *reportDetailDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r reportDetailDo) Join(table schema.Tabler, on ...field.Expr) *reportDetailDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r reportDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) *reportDetailDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r reportDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) *reportDetailDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r reportDetailDo) Group(cols ...field.Expr) *reportDetailDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r reportDetailDo) Having(conds ...gen.Condition) *reportDetailDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r reportDetailDo) Limit(limit int) *reportDetailDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r reportDetailDo) Offset(offset int) *reportDetailDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r reportDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *reportDetailDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r reportDetailDo) Unscoped() *reportDetailDo {
	return r.withDO(r.DO.Unscoped())
}

func (r reportDetailDo) Create(values ...*model.ReportDetail) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r reportDetailDo) CreateInBatches(values []*model.ReportDetail, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r reportDetailDo) Save(values ...*model.ReportDetail) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r reportDetailDo) First() (*model.ReportDetail, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportDetail), nil
	}
}

func (r reportDetailDo) Take() (*model.ReportDetail, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportDetail), nil
	}
}

func (r reportDetailDo) Last() (*model.ReportDetail, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportDetail), nil
	}
}

func (r reportDetailDo) Find() ([]*model.ReportDetail, error) {
	result, err := r.DO.Find()
	return result.([]*model.ReportDetail), err
}

func (r reportDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReportDetail, err error) {
	buf := make([]*model.ReportDetail, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r reportDetailDo) FindInBatches(result *[]*model.ReportDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r reportDetailDo) Attrs(attrs ...field.AssignExpr) *reportDetailDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r reportDetailDo) Assign(attrs ...field.AssignExpr) *reportDetailDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r reportDetailDo) Joins(fields ...field.RelationField) *reportDetailDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r reportDetailDo) Preload(fields ...field.RelationField) *reportDetailDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r reportDetailDo) FirstOrInit() (*model.ReportDetail, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportDetail), nil
	}
}

func (r reportDetailDo) FirstOrCreate() (*model.ReportDetail, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReportDetail), nil
	}
}

func (r reportDetailDo) FindByPage(offset int, limit int) (result []*model.ReportDetail, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r reportDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r reportDetailDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r reportDetailDo) Delete(models ...*model.ReportDetail) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *reportDetailDo) withDO(do gen.Dao) *reportDetailDo {
	r.DO = *do.(*gen.DO)
	return r
}
